// Base font size
$rfs-base-font-size: 1.25rem !default;

// Base unit
$rfs-unit: rem !default;

// Breakpoint where font sizes start decreasing
$rfs-breakpoint: 1200px !default;

// Factor of decrease
$rfs-factor: 10 !default;

// Mode: min-media-query or max-media-query
$rfs-mode: min-media-query !default;

// Enable or disable classes: false, "enable", or "disable"
$rfs-class: false !default;

// 1rem = $rfs-rem-value pixels
$rfs-rem-value: 16 !default;

// Enable or disable RFS
$enable-rfs: true !default;

// Responsive font sizing mixin
@mixin rfs($values, $property: font-size) {
  @if $values != null {
    $value: if(type-of($values) == list, nth($values, 1), $values);

    $base-value: if(unit($value) == px, $value / $rfs-rem-value, $value);

    $fluid-value: if(abs($base-value) > $rfs-base-font-size, $rfs-base-font-size + ($base-value - $rfs-base-font-size) / $rfs-factor, $base-value);

    $media-query: if($rfs-mode == max-media-query, $fluid-value, $base-value);

    @include _rfs-rule {
      #{$property}: $value;
    }

    @include _rfs-media-query-rule {
      #{$property}: $media-query * 1#{$rfs-unit};
    }
  }
}

// Shorthand mixins
@mixin font-size($value) {
  @include rfs($value);
}

@mixin padding($value) {
  @include rfs($value, padding);
}

@mixin padding-top($value) {
  @include rfs($value, padding-top);
}

@mixin padding-right($value) {
  @include rfs($value, padding-right);
}

@mixin padding-bottom($value) {
  @include rfs($value, padding-bottom);
}

@mixin padding-left($value) {
  @include rfs($value, padding-left);
}

@mixin margin($value) {
  @include rfs($value, margin);
}

@mixin margin-top($value) {
  @include rfs($value, margin-top);
}

@mixin margin-right($value) {
  @include rfs($value, margin-right);
}

@mixin margin-bottom($value) {
  @include rfs($value, margin-bottom);
}

@mixin margin-left($value) {
  @include rfs($value, margin-left);
}

// Internal mixin for media query
@mixin _rfs-media-query {
  @if $rfs-two-dimensional {
    @if $rfs-mode == max-media-query {
      @media (max-width: $rfs-breakpoint), (max-height: $rfs-breakpoint) {
        @content;
      }
    } @else {
      @media (min-width: $rfs-breakpoint) and (min-height: $rfs-breakpoint) {
        @content;
      }
    }
  } @else {
    @media (min-width: $rfs-breakpoint) {
      @content;
    }
  }
}

// Internal mixin that adds disable classes to the selector if needed.
@mixin _rfs-rule {
  @if $rfs-class == disable and $rfs-mode == max-media-query {
    &,
    .disable-rfs &,
    &.disable-rfs {
      @content;
    }
  } @else if $rfs-class == enable and $rfs-mode == min-media-query {
    .enable-rfs &,
    &.enable-rfs {
      @content;
    }
  } @else {
    @content;
  }
}

// Internal mixin that adds enable classes to the selector if needed.
@mixin _rfs-media-query-rule {
  @if $rfs-class == enable {
    @if $rfs-mode == min-media-query {
      @content;
    }

    @include _rfs-media-query {
      .enable-rfs &,
      &.enable-rfs {
        @content;
      }
    }
  } @else {
    @if $rfs-class == disable and $rfs-mode == min-media-query {
      .disable-rfs &,
      &.disable-rfs {
        @content;
      }
    }
    @include _rfs-media-query {
      @content;
    }
  }
}
